var mongo = require('mongodb');
var MongoClient=mongo.MongoClient
var crypto = require('crypto');
var bodyParser = require('body-parser');
var plivo = require('plivo');
var config = require('../config')
var cloud=require('../test')
var crypto = require('crypto'),
    algorithm = 'aes-256-ctr',
    password = 'a13I11ET23';

function encrypt(buffer) {
    // return buffer;
    var cipher = crypto.createCipher(algorithm,password)
    var crypted = Buffer.concat([cipher.update(buffer),cipher.final()]);
    return crypted;
}

function decrypt(buffer) {
    // return buffer
    var decipher = crypto.createDecipher(algorithm,password)
    var dec = Buffer.concat([decipher.update(buffer) , decipher.final()]);
    return dec;
}

var jsonParser = bodyParser.json();
var fcm = {
    generatefcm: function (req, res) {
        var Server = mongo.Server,
            Db = mongo.Db,
            BSON = mongo.BSONPure;

        var host = config.development.database.host
        var port = config.development.database.port
        var dbname = config.development.database.db

        var server = new Server(host, port, {auto_reconnect: true});
        db = new Db(dbname, server);
        var api = plivo.RestAPI({
            authId: 'MAYJVLZGU4Y2JMODVLNJ',
            authToken: 'ODEyZjFiZTE1ZGExMDJiOWFiNDgyNGIzZGEzN2Zj',
        });


        MongoClient.connect(host,function (err, db) {

                if (!err) {


                    console.log("Connected to 'signup' database");
                    db.collection('otp', {strict: true}, function (err, collection) {
                        if (err) {

                            console.log("The otp collection doesn't exist. Creating it with sample data...");

                        }
                        else {
                            var userId = req.body.userId
                            var by = req.body.by
                            var regToken = req.body.regToken
                            var _id, collectionname,comp;
                            if ('0'===(by))
                            {
                                collectionname='digo'
                                var ObjectId=mongo.ObjectId
                                _id = new ObjectId(userId)
                                comp="_id"



                            }
                            else
                            {
                                collectionname='teacherDetails'
                                _id=userId
                                comp="teachId"
                            }
                             collectionname=db.collection(collectionname);
                            collectionname.findOne({[comp]:_id},function (errordoc,resultdoc) {
                                if(errordoc===null)
                                {
                                    var  newww=[]
                                    var newupdoc={}


                                    if(resultdoc!==null&&resultdoc.regTokens!==null&&resultdoc.regTokens!==undefined)
                                        newww=resultdoc.regTokens
                                    var t=regToken
                                    if(!newww.includes(t))
                                        newww.push(t)
                                    console.log(newww)
                                    var regArray=[]
                                    for (var i=0;i<newww.length;i++)
                                    {
                                        if(newww[i]!==req.body.oldregToken)
                                            regArray.push(newww[i])
                                    }
                                    newupdoc['regTokens']=regArray

                                    collectionname.update({[comp]:_id}, {
                                        $set: newupdoc
                                    },function (errrors,resultss) {
                                        console.log(errrors)
                                        if((errrors===null)&&(resultss.result.nModified!==0)) {
                                            console.log(resultss.result.nModified)
                                            res.send({'status': 'success', 'msg': 'Token refreshed'})
                                        }
                                        else
                                        {
                                            res.send({'status':'error','msg':'Oops something went wrong!'})
                                        }
                                    })
                                }
                                else
                                {
                                    res.send({'status':'error','msg':'Oops something went wrong!'})
                                }


                            })



                            //seenBy is 0 if teacher sees and 1 if student sees it
                            //active msg id and seen is blank then update subid stud id






                        }
                    })
                }
            }
        )
    }
}
module.exports=fcm